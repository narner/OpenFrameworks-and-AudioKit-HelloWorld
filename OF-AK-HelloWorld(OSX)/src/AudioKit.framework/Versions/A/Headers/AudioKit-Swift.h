// Generated by Apple Swift version 4.0 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import AVFoundation;
@import Foundation;
@import Accelerate;
@import AppKit;
@import CoreGraphics;
@import AudioToolbox;
#endif

#import <AudioKit/AudioKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("AudioKit")

/// Parent class for all nodes in AudioKit
SWIFT_CLASS("_TtC8AudioKit6AKNode")
@interface AKNode : NSObject
/// Create the node
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 3-D Spatialization of the input
SWIFT_CLASS("_TtC8AudioKit10AK3DPanner")
@interface AK3DPanner : AKNode
/// Position of sound source along x-axis
@property (nonatomic) double x;
/// Position of sound source along y-axis
@property (nonatomic) double y;
/// Position of sound source along z-axis
@property (nonatomic) double z;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Triggerable classic ADSR envelope
SWIFT_CLASS("_TtC8AudioKit19AKAmplitudeEnvelope")
@interface AKAmplitudeEnvelope : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Performs a “root-mean-square” on a signal to get overall amplitude of a
/// signal. The output signal looks similar to that of a classic VU meter.
SWIFT_CLASS("_TtC8AudioKit18AKAmplitudeTracker")
@interface AKAmplitudeTracker : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Detected amplitude
@property (nonatomic, readonly) double amplitude;
/// Detected amplitude
@property (nonatomic, readonly) double leftAmplitude;
/// Detected right amplitude
@property (nonatomic, readonly) double rightAmplitude;
/// Threshold amplitude
@property (nonatomic) double threshold;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Audio file, inherits from AVAudioFile and adds functionality
SWIFT_CLASS("_TtC8AudioKit11AKAudioFile")
@interface AKAudioFile : AVAudioFile
/// Initialize the audio file
/// \param fileURL URL of the file
///
///
/// returns:
/// An initialized AKAudioFile object for reading, or nil if init failed.
- (nullable instancetype)initForReading:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize the audio file
/// \param fileURL URL of the file
///
/// \param format The processing commonFormat to use when reading from the file.
///
/// \param interleaved Whether to use an interleaved processing format.
///
///
/// returns:
/// An initialized AKAudioFile object for reading, or nil if init failed.
- (nullable instancetype)initForReading:(NSURL * _Nonnull)fileURL commonFormat:(AVAudioCommonFormat)format interleaved:(BOOL)interleaved error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize the audio file
/// From Apple doc: The file type to create is inferred from the file extension of fileURL.
/// This method will overwrite a file at the specified URL if a file already exists.
/// The file is opened for writing using the standard format, AVAudioPCMFormatFloat32.
/// Note: It seems that Apple’s AVAudioFile class has a bug with .wav files. They cannot be set
/// with a floating Point encoding. As a consequence, such files will fail to record properly.
/// So it’s better to use .caf (or .aif) files for recording purpose.
/// \param fileURL URL of the file.
///
/// \param settings The format of the file to create.
///
/// \param format The processing commonFormat to use when writing.
///
/// \param interleaved Whether to use an interleaved processing format.
///
///
/// throws:
/// NSError if init failed
///
/// returns:
/// An initialized AKAudioFile for writing, or nil if init failed.
- (nullable instancetype)initForWriting:(NSURL * _Nonnull)fileURL settings:(NSDictionary<NSString *, id> * _Nonnull)settings commonFormat:(AVAudioCommonFormat)format interleaved:(BOOL)interleaved error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Super.init inherited from AVAudioFile superclass
/// From Apple doc: The file type to create is inferred from the file extension of fileURL.
/// This method will overwrite a file at the specified URL if a file already exists.
/// The file is opened for writing using the standard format, AVAudioPCMFormatFloat32.
/// Note: It seems that Apple’s AVAudioFile class has a bug with .wav files. They cannot be set
/// with a floating Point encoding. As a consequence, such files will fail to record properly.
/// So it’s better to use .caf (or .aif) files for recording purpose.
/// \param fileURL URL of the file.
///
/// \param settings The settings of the file to create.
///
///
/// returns:
/// An initialized AKAudioFile for writing, or nil if init failed.
- (nullable instancetype)initForWriting:(NSURL * _Nonnull)fileURL settings:(NSDictionary<NSString *, id> * _Nonnull)settings error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end











@class AVAudioPCMBuffer;
@class AVAudioTime;

/// Not so simple audio playback class
SWIFT_CLASS("_TtC8AudioKit13AKAudioPlayer")
@interface AKAudioPlayer : AKNode
/// Buffer to be palyed
@property (nonatomic, strong) AVAudioPCMBuffer * _Nullable audioFileBuffer;
/// Will be triggered when AKAudioPlayer has finished to play.
/// (will not as long as loop is on)
@property (nonatomic, copy) void (^ _Nullable completionHandler)(void);
/// Boolean indicating whether or not to loop the playback (Default false)
@property (nonatomic) BOOL looping;
/// Boolean indicating to play the buffer in reverse
@property (nonatomic) BOOL reversed;
/// Fade in duration
@property (nonatomic) double fadeInTime;
/// Fade out duration
@property (nonatomic) double fadeOutTime;
/// The current played AKAudioFile
@property (nonatomic, readonly, strong) AKAudioFile * _Nonnull audioFile;
/// Path to the currently loaded AKAudioFile
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
/// Total duration of one loop through of the file
@property (nonatomic, readonly) double duration;
/// Output Volume (Default 1)
@property (nonatomic) double volume;
/// Whether or not the audio player is currently started
@property (nonatomic, readonly) BOOL isStarted;
/// Current playback time (in seconds)
@property (nonatomic, readonly) double currentTime;
/// Time within the audio file at the current time
@property (nonatomic, readonly) double playhead;
/// Pan (Default Center = 0)
@property (nonatomic) double pan;
/// sets the start time, If it is playing, player will
/// restart playing from the start time each time end time is set
@property (nonatomic) double startTime;
/// sets the end time, If it is playing, player will
/// restart playing from the start time each time end time is set
@property (nonatomic) double endTime;
/// Sets the time in the future when playback will commence. Recommend using play(from:to:avTime) instead.
/// this will be deprecated
@property (nonatomic) double scheduledTime;
/// Sheduled time
@property (nonatomic, strong) AVAudioTime * _Nullable scheduledAVTime;
/// Start playback
- (void)start;
/// Stop playback
- (void)stop;
/// Stop playback after next loop completes
- (void)stopAtNextLoopEnd;
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Bare bones implementation of AKPolyphonic protocol
SWIFT_CLASS("_TtC8AudioKit16AKPolyphonicNode")
@interface AKPolyphonicNode : AKNode
/// Stop a sound corresponding to a MIDI note
/// \param noteNumber MIDI Note Number
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A version of AKInstrument specifically targeted to instruments that
/// should be triggerable via MIDI or sequenced with the sequencer.
SWIFT_CLASS("_TtC8AudioKit16AKMIDIInstrument")
@interface AKMIDIInstrument : AKPolyphonicNode
/// Initialize the MIDI Instrument
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Start a note
/// \param noteNumber Note number to play
///
/// \param velocity Velocity at which to play the note (0 - 127)
///
/// \param channel Channel on which to play the note
///
- (void)startWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Stop a note
/// \param noteNumber Note number to stop
///
/// \param channel Channel on which to stop the note
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel;
@end


/// Wrapper for audio units that accept MIDI (ie. instruments)
SWIFT_CLASS("_TtC8AudioKit21AKAudioUnitInstrument")
@interface AKAudioUnitInstrument : AKMIDIInstrument
/// Send MIDI Note Off information to the audio unit
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         noteNumber: MIDI note number to stop
///       </li>
///       <li>
///         channel: MIDI channel to stop the note on
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Audio Unit Manager
SWIFT_CLASS("_TtC8AudioKit18AKAudioUnitManager")
@interface AKAudioUnitManager : NSObject
/// Initialize the manager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An automatic wah effect, ported from Guitarix via Faust.
SWIFT_CLASS("_TtC8AudioKit9AKAutoWah")
@interface AKAutoWah : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Wah Amount
@property (nonatomic) double wah;
/// Dry/Wet Mix
@property (nonatomic) double mix;
/// Overall level
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This node outputs a version of the audio source, amplitude-modified so
/// that its rms power is equal to that of the comparator audio source. Thus a
/// signal that has suffered loss of power (eg., in passing through a filter
/// bank) can be restored by matching it with, for instance, its own source. It
/// should be noted that this modifies amplitude only; output signal is not
/// altered in any other respect.
SWIFT_CLASS("_TtC8AudioKit10AKBalancer")
@interface AKBalancer : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit27AKBandPassButterworthFilter")
@interface AKBandPassButterworthFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency. (in Hertz)
@property (nonatomic) double centerFrequency;
/// Bandwidth. (in Hertz)
@property (nonatomic) double bandwidth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit29AKBandRejectButterworthFilter")
@interface AKBandRejectButterworthFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency. (in Hertz)
@property (nonatomic) double centerFrequency;
/// Bandwidth. (in Hertz)
@property (nonatomic) double bandwidth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This will digitally degrade a signal.
SWIFT_CLASS("_TtC8AudioKit12AKBitCrusher")
@interface AKBitCrusher : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// The bit depth of signal output. Typically in range (1-24). Non-integer values are OK.
@property (nonatomic) double bitDepth;
/// The sample rate of signal output.
@property (nonatomic) double sampleRate;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Stereo Booster
SWIFT_CLASS("_TtC8AudioKit9AKBooster")
@interface AKBooster : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Amplification Factor
@property (nonatomic) double gain;
/// Left Channel Amplification Factor
@property (nonatomic) double leftGain;
/// Right Channel Amplification Factor
@property (nonatomic) double rightGain;
/// Amplification Factor in db
@property (nonatomic) double dB;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Faust-based pink noise generator
SWIFT_CLASS("_TtC8AudioKit15AKBrownianNoise")
@interface AKBrownianNoise : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Amplitude. (Value between 0-1).
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// MIDI Instrument that triggers functions on MIDI note on/off commands
SWIFT_CLASS("_TtC8AudioKit20AKCallbackInstrument")
@interface AKCallbackInstrument : AKMIDIInstrument
/// Will trigger in response to any noteOn Message
/// \param noteNumber MIDI Note Number being started
///
/// \param velocity MIDI Velocity (0-127)
///
/// \param channel MIDI Channel
///
- (void)startWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Will trigger in response to any noteOff Message
/// \param noteNumber MIDI Note Number being stopped
///
/// \param channel MIDI Channel
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This is was built using the JC reverb implentation found in FAUST. According
/// to the source code, the specifications for this implementation were found on
/// an old SAIL DART backup tape.
/// This class is derived from the CLM JCRev function, which is based on the use
/// of networks of simple allpass and comb delay filters.  This class implements
/// three series allpass units, followed by four parallel comb filters, and two
/// decorrelation delay lines in parallel at the output.
SWIFT_CLASS("_TtC8AudioKit16AKChowningReverb")
@interface AKChowningReverb : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// STK Clarinet
SWIFT_CLASS("_TtC8AudioKit10AKClarinet")
@interface AKClarinet : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mandolin with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// A protocol containing timing information for scheduling audio clips in a timeline.  All
/// properties are time values in seconds, relative to a zero based timeline.
SWIFT_PROTOCOL("_TtP8AudioKit6AKClip_")
@protocol AKClip
/// The time in the timeline that the clip should begin playing.
@property (nonatomic, readonly) double time;
/// The offset into the clip’s audio (where to start playing from within the clip).
@property (nonatomic, readonly) double offset;
/// The duration of playback.
@property (nonatomic, readonly) double duration;
@end


/// AKClipMerger merges new clips into an existing array of validated clips and returns a
/// new array of validated clips including the new clip.
/// <h2>Validation rules:</h2>
/// <ul>
///   <li>
///     The clip itself must be valid as defined by the clip’s isValid function.
///   </li>
///   <li>
///     The clips in the array must not overlap each other (clip.time + clip.duration <= nextClip.time).
///   </li>
/// </ul>
/// The strategy used when a new clip overlaps an existing clip is last-in precedence.  Existing
/// clips will shortened, split, or removed in order to make room for the new clip.  Since clips
/// can be split or removed, merging a clip may result in the clip count decreasing when a clip is
/// merged, or increasing by more than 1.  This behavior requires that the clip merger create clips,
/// so to facilitate this need it uses a delegate.  When a clip is to be shortened, it is removed
/// from the existing clips, and a new clip is created using the delegate’s newClip function.  When
/// a clip is to be split, the original is removed and newClip will be called twice.  When a clip is
/// removed, the delegate’s clipWillBeRemoved function will be called (if implemented).
SWIFT_CLASS("_TtC8AudioKit12AKClipMerger")
@interface AKClipMerger : NSObject
/// Creates a validated array of clips with the new clip merged into an array of validated clips.
/// \param clip The clip to be merged
///
/// \param clips A validated clip array.
///
///
/// returns:
/// A validated array of clips containing the new clip merged with clips.
- (NSArray<id <AKClip>> * _Nonnull)mergeWithClip:(id <AKClip> _Nonnull)clip clips:(NSArray<id <AKClip>> * _Nonnull)clips SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Schedules multiple audio files to be played in a sequence.
SWIFT_CLASS("_TtC8AudioKit12AKClipPlayer")
@interface AKClipPlayer : AKNode
/// Sets the current time in seconds.
- (void)setTime:(double)time;
/// Time in seconds at a given audio time
/// \param audioTime A time in the audio render context.
///
///
/// returns:
/// Time in seconds in the context of the player’s timeline.
- (double)timeAtAudioTime:(AVAudioTime * _Nullable)audioTime SWIFT_WARN_UNUSED_RESULT;
/// Audio time for a given time.
/// \param time Time in seconds in the context of the player’s timeline.
///
///
/// returns:
/// A time in the audio render context.
- (AVAudioTime * _Nullable)audioTimeAtTime:(double)time SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Starts playback at next render cycle, AVAudioEngine must be running.
- (void)play;
/// Starts playback at time
/// \param audioTime A time in the audio render context.  If non-nil, the player’s current
/// current time will align with this time when playback starts.
///
- (void)playAt:(AVAudioTime * _Nullable)audioTime;
/// Stops playback.
- (void)stop;
@end


/// Clips a signal to a predefined limit, in a “soft” manner, using one of three
/// methods.
SWIFT_CLASS("_TtC8AudioKit9AKClipper")
@interface AKClipper : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Threshold / limiting value.
@property (nonatomic) double limit;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This filter reiterates input with an echo density determined by
/// loopDuration. The attenuation rate is independent and is determined by
/// reverbDuration, the reverberation duration (defined as the time in seconds
/// for a signal to decay to 1/1000, or 60dB down from its original amplitude).
/// Output from a comb filter will appear only after loopDuration seconds.
SWIFT_CLASS("_TtC8AudioKit18AKCombFilterReverb")
@interface AKCombFilterReverb : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// The time in seconds for a signal to decay to 1/1000, or 60dB from its original amplitude. (aka RT-60).
@property (nonatomic) double reverbDuration;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit Compressor based on Apple’s DynamicsProcessor Audio Unit
SWIFT_CLASS("_TtC8AudioKit12AKCompressor")
@interface AKCompressor : AKNode
/// Threshold (dB) ranges from -40 to 20 (Default: -20)
@property (nonatomic) double threshold;
/// Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
@property (nonatomic) double headRoom;
/// Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) double attackTime;
/// Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) double releaseTime;
/// Compression Amount (dB) read only
@property (nonatomic, readonly) double compressionAmount;
/// Input Amplitude (dB) read only
@property (nonatomic, readonly) double inputAmplitude;
/// Output Amplitude (dB) read only
@property (nonatomic, readonly) double outputAmplitude;
/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double masterGain;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This module will perform partitioned convolution on an input signal using an
/// audio file as an impulse response.
SWIFT_CLASS("_TtC8AudioKit13AKConvolution")
@interface AKConvolution : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// 8 delay line stereo FDN reverb, with feedback matrix based upon physical
/// modeling scattering junction of 8 lossless waveguides of equal
/// characteristic impedance.
SWIFT_CLASS("_TtC8AudioKit16AKCostelloReverb")
@interface AKCostelloReverb : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Feedback level in the range 0 to 1. 0.6 gives a good small ‘live’ room sound, 0.8 a small hall, and 0.9 a
/// large hall. A setting of exactly 1 means infinite length, while higher values will make the opcode unstable.
@property (nonatomic) double feedback;
/// Low-pass cutoff frequency.
@property (nonatomic) double cutoffFrequency;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



@class AKSporthStack;

/// Custom Sporth Unit Generator (Ugen)
SWIFT_CLASS("_TtC8AudioKit12AKCustomUgen")
@interface AKCustomUgen : NSObject
/// Name of the Ugen
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// String describing the arugments: f for float / s for string, e.g. “fsf”
@property (nonatomic, readonly, copy) NSString * _Nonnull argTypes;
/// Custom object that may be passed in
@property (nonatomic) id _Nullable userData;
/// The sporth stack
@property (nonatomic, strong) AKSporthStack * _Nonnull stack;
/// Duplicate the Ugen
- (AKCustomUgen * _Nonnull)duplicate SWIFT_WARN_UNUSED_RESULT;
/// Executre the compute function
@property (nonatomic, readonly) void (* _Nonnull callComputeFunction)(AKCustomUgen * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Implements the DC blocking filter Y[i] = X[i] - X[i-1] + (igain * Y[i-1])
/// Based on work by Perry Cook.
SWIFT_CLASS("_TtC8AudioKit9AKDCBlock")
@interface AKDCBlock : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s Decimator from the Distortion Audio Unit
SWIFT_CLASS("_TtC8AudioKit11AKDecimator")
@interface AKDecimator : AKNode
/// Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double decimation;
/// Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)
@property (nonatomic) double rounding;
/// Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
@property (nonatomic) double mix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s Delay Audio Unit
SWIFT_CLASS("_TtC8AudioKit7AKDelay")
@interface AKDelay : AKNode
/// Delay time in seconds (Default: 1)
@property (nonatomic) NSTimeInterval time;
/// Feedback (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double feedback;
/// Low pass cut-off frequency in Hertz (Default: 15000)
@property (nonatomic) double lowPassCutoff;
/// Dry/Wet Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// Wrapper for audio device selection
SWIFT_CLASS("_TtC8AudioKit8AKDevice")
@interface AKDevice : NSObject
/// Printable device description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s Distortion Audio Unit
SWIFT_CLASS("_TtC8AudioKit12AKDistortion")
@interface AKDistortion : AKNode
/// Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)
@property (nonatomic) double delay;
/// Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)
@property (nonatomic) double decay;
/// Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double delayMix;
/// Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double decimation;
/// Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)
@property (nonatomic) double rounding;
/// Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double decimationMix;
/// Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double linearTerm;
/// Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double squaredTerm;
/// Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double cubicTerm;
/// Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double polynomialMix;
/// Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double ringModFreq1;
/// Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double ringModFreq2;
/// Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double ringModBalance;
/// Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)
@property (nonatomic) double ringModMix;
/// Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)
@property (nonatomic) double softClipGain;
/// Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double finalMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// Physical model of the sound of dripping water. When triggered, it will
/// produce a droplet of water.
SWIFT_CLASS("_TtC8AudioKit6AKDrip")
@interface AKDrip : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// The intensity of the dripping sound.
@property (nonatomic) double intensity;
/// The damping factor. Maximum value is 2.0.
@property (nonatomic) double dampingFactor;
/// The amount of energy to add back into the system.
@property (nonatomic) double energyReturn;
/// Main resonant frequency.
@property (nonatomic) double mainResonantFrequency;
/// The first resonant frequency.
@property (nonatomic) double firstResonantFrequency;
/// The second resonant frequency.
@property (nonatomic) double secondResonantFrequency;
/// Amplitude.
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the drip with defaults
- (nonnull instancetype)init;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// Balanceable Mix between two signals, usually used for a dry signal and wet signal
SWIFT_CLASS("_TtC8AudioKit13AKDryWetMixer")
@interface AKDryWetMixer : AKNode
/// Balance (Default 0.5)
@property (nonatomic) double balance;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// DynaRage Tube Compressor | Based on DynaRage Tube Compressor RE for Reason
/// by Devoloop Srls
SWIFT_CLASS("_TtC8AudioKit20AKDynaRageCompressor")
@interface AKDynaRageCompressor : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Ratio to compress with, a value > 1 will compress
@property (nonatomic) double ratio;
/// Threshold (in dB) 0 = max
@property (nonatomic) double threshold;
/// Attack time
@property (nonatomic) double attackTime;
/// Release time
@property (nonatomic) double releaseTime;
/// Rage Amount
@property (nonatomic) double rageAmount;
/// Rage ON/OFF Switch
@property (nonatomic) BOOL rageIsOn;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Dynamic range compressor from Faust
SWIFT_CLASS("_TtC8AudioKit24AKDynamicRangeCompressor")
@interface AKDynamicRangeCompressor : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Ratio to compress with, a value > 1 will compress
@property (nonatomic) double ratio;
/// Threshold (in dB) 0 = max
@property (nonatomic) double threshold;
/// Attack time
@property (nonatomic) double attackTime;
/// Release time
@property (nonatomic) double releaseTime;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s DynamicsProcessor Audio Unit
SWIFT_CLASS("_TtC8AudioKit19AKDynamicsProcessor")
@interface AKDynamicsProcessor : AKNode
/// Threshold (dB) ranges from -40 to 20 (Default: -20)
@property (nonatomic) double threshold;
/// Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
@property (nonatomic) double headRoom;
/// Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionRatio;
/// Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionThreshold;
/// Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) double attackTime;
/// Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) double releaseTime;
/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double masterGain;
/// Compression Amount (dB) read only
@property (nonatomic, readonly) double compressionAmount;
/// Input Amplitude (dB) read only
@property (nonatomic, readonly) double inputAmplitude;
/// Output Amplitude (dB) read only
@property (nonatomic, readonly) double outputAmplitude;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A 2nd order tunable equalization filter that provides a peak/notch filter
/// for building parametric/graphic equalizers. With gain above 1, there will be
/// a peak at the center frequency with a width dependent on bandwidth. If gain
/// is less than 1, a notch is formed around the center frequency.
SWIFT_CLASS("_TtC8AudioKit17AKEqualizerFilter")
@interface AKEqualizerFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency. (in Hertz)
@property (nonatomic) double centerFrequency;
/// The peak/notch bandwidth in Hertz
@property (nonatomic) double bandwidth;
/// The peak/notch gain
@property (nonatomic) double gain;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit Expander based on Apple’s DynamicsProcessor Audio Unit
SWIFT_CLASS("_TtC8AudioKit10AKExpander")
@interface AKExpander : AKNode
/// Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionRatio;
/// Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionThreshold;
/// Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) double attackTime;
/// Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) double releaseTime;
/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double masterGain;
/// Compression Amount (dB) read only
@property (nonatomic, readonly) double compressionAmount;
/// Input Amplitude (dB) read only
@property (nonatomic, readonly) double inputAmplitude;
/// Output Amplitude (dB) read only
@property (nonatomic, readonly) double outputAmplitude;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class EZAudioFFT;

/// FFT Calculation for any node
SWIFT_CLASS("_TtC8AudioKit8AKFFTTap")
@interface AKFFTTap : NSObject <EZAudioFFTDelegate>
/// Callback function for FFT computation
- (void)fft:(EZAudioFFT * _Null_unspecified)fft updatedWithFFTData:(float * _Nonnull)fftData bufferSize:(vDSP_Length)bufferSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Classic FM Synthesis audio generation.
SWIFT_CLASS("_TtC8AudioKit14AKFMOscillator")
@interface AKFMOscillator : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// In cycles per second, or Hz, this is the common denominator for the carrier and modulating frequencies.
@property (nonatomic) double baseFrequency;
/// This multiplied by the baseFrequency gives the carrier frequency.
@property (nonatomic) double carrierMultiplier;
/// This multiplied by the baseFrequency gives the modulating frequency.
@property (nonatomic) double modulatingMultiplier;
/// This multiplied by the modulating frequency gives the modulation amplitude.
@property (nonatomic) double modulationIndex;
/// Output Amplitude.
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end




/// Frequency Modulation Polyphonic Oscillator
SWIFT_CLASS("_TtC8AudioKit18AKFMOscillatorBank")
@interface AKFMOscillatorBank : AKPolyphonicNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// This multiplied by the baseFrequency gives the carrier frequency.
@property (nonatomic) double carrierMultiplier;
/// This multiplied by the baseFrequency gives the modulating frequency.
@property (nonatomic) double modulatingMultiplier;
/// This multiplied by the modulating frequency gives the modulation amplitude.
@property (nonatomic) double modulationIndex;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) double pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) double vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) double vibratoRate;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// A file based AKClip
SWIFT_PROTOCOL("_TtP8AudioKit8FileClip_")
@protocol FileClip <AKClip>
@property (nonatomic, readonly, strong) AKAudioFile * _Nonnull audioFile;
@end


/// A FileClip implementation, used by AKClipPlayer.
SWIFT_CLASS("_TtC8AudioKit10AKFileClip")
@interface AKFileClip : NSObject <FileClip>
/// The audio file that will be read.
@property (nonatomic, strong) AKAudioFile * _Nonnull audioFile;
/// The time in the timeline that the clip should begin playing.
@property (nonatomic) double time;
/// The offset into the clip’s audio (where to start playing from within the clip).
@property (nonatomic) double offset;
/// The duration of playback.
@property (nonatomic) double duration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// The protocol for the AKClipMerger’s delegate
/// It is the responsibility of the delegate to create a new clip when a an existing clip
/// has been altered or split.
SWIFT_PROTOCOL("_TtP8AudioKit17ClipMergeDelegate_")
@protocol ClipMergeDelegate
/// A new clip, derived from an existing clip, with specified values.
/// <ul>
///   <li>
///     Return A newly created clip with time, offset, and duration set to provided values.
///   </li>
/// </ul>
/// \param clip The existing clip that the new clip should be derived from.
///
/// \param time The newly created clip’s time.
///
/// \param offset The newly created clip’s time.
///
/// \param duration The newly created clip’s time.
///
- (id <AKClip> _Nullable)newClipFrom:(id <AKClip> _Nonnull)clip time:(double)time offset:(double)offset duration:(double)duration SWIFT_WARN_UNUSED_RESULT;
@optional
/// Called when an existing clip will be removed as a result of merging in a new clip.
- (void)clipWillBeRemoved:(id <AKClip> _Nonnull)clip;
@end


/// A class that manages the merging of AKFileClips.
SWIFT_CLASS("_TtC8AudioKit18AKFileClipSequence")
@interface AKFileClipSequence : NSObject <ClipMergeDelegate>
/// Clip merger delegate function
- (id <AKClip> _Nullable)newClipFrom:(id <AKClip> _Nonnull)clip time:(double)time offset:(double)offset duration:(double)duration SWIFT_WARN_UNUSED_RESULT;
/// A validated array of file clips.  Fails if setting an invalid array of clips.
@property (nonatomic, copy) NSArray<AKFileClip *> * _Nonnull clips;
/// Merges a clip into existing clips.  Fails if clip is invalid.
- (void)addWithClip:(AKFileClip * _Nonnull)clip;
/// Initialize a clip sequence with an array of clips.
/// \param clips An array of file clips.  Will not be set if clips are invalid.
///
- (nonnull instancetype)initWithClips:(NSArray<AKFileClip *> * _Nonnull)clips OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This filter reiterates the input with an echo density determined by loop
/// time. The attenuation rate is independent and is determined by the
/// reverberation time (defined as the time in seconds for a signal to decay to
/// 1/1000, or 60dB down from its original amplitude).  Output will begin to
/// appear immediately.
SWIFT_CLASS("_TtC8AudioKit29AKFlatFrequencyResponseReverb")
@interface AKFlatFrequencyResponseReverb : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// The duration in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude.
@property (nonatomic) double reverbDuration;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// STK Flutee
SWIFT_CLASS("_TtC8AudioKit7AKFlute")
@interface AKFlute : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mandolin with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// When fed with a pulse train, it will generate a series of overlapping
/// grains. Overlapping will occur when 1/freq < dec, but there is no upper
/// limit on the number of overlaps.
SWIFT_CLASS("_TtC8AudioKit15AKFormantFilter")
@interface AKFormantFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// x
@property (nonatomic) double x;
/// y
@property (nonatomic) double y;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This is based on an algorithm originally created by Miller Puckette.
SWIFT_CLASS("_TtC8AudioKit18AKFrequencyTracker")
@interface AKFrequencyTracker : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Detected Amplitude (Use AKAmplitude tracker if you don’t need frequency)
@property (nonatomic, readonly) double amplitude;
/// Detected frequency
@property (nonatomic, readonly) double frequency;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit27AKHighPassButterworthFilter")
@interface AKHighPassButterworthFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Cutoff frequency. (in Hertz)
@property (nonatomic) double cutoffFrequency;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s HighPassFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit16AKHighPassFilter")
@interface AKHighPassFilter : AKNode
/// Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
@property (nonatomic) double cutoffFrequency;
/// Resonance (dB) ranges from -20 to 40 (Default: 0)
@property (nonatomic) double resonance;
/// Dry/Wet Mix (Default: 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s HighShelfFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit17AKHighShelfFilter")
@interface AKHighShelfFilter : AKNode
/// Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)
@property (nonatomic) double cutoffFrequency;
/// Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double gain;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This is an implementation of Zoelzer’s parametric equalizer filter.
SWIFT_CLASS("_TtC8AudioKit36AKHighShelfParametricEqualizerFilter")
@interface AKHighShelfParametricEqualizerFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Corner frequency.
@property (nonatomic) double centerFrequency;
/// Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
@property (nonatomic) double gain;
/// Q of the filter. sqrt(0.5) is no resonance.
@property (nonatomic) double q;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8AudioKit17AKInputConnection")
@interface AKInputConnection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Analog model of the Korg 35 Lowpass Filter
SWIFT_CLASS("_TtC8AudioKit19AKKorgLowPassFilter")
@interface AKKorgLowPassFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Filter cutoff
@property (nonatomic) double cutoffFrequency;
/// Filter resonance (should be between 0-2)
@property (nonatomic) double resonance;
/// Filter saturation.
@property (nonatomic) double saturation;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit26AKLowPassButterworthFilter")
@interface AKLowPassButterworthFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Cutoff frequency. (in Hertz)
@property (nonatomic) double cutoffFrequency;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s LowPassFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit15AKLowPassFilter")
@interface AKLowPassFilter : AKNode
/// Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
@property (nonatomic) double cutoffFrequency;
/// Resonance (dB) ranges from -20 to 40 (Default: 0)
@property (nonatomic) double resonance;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s LowShelfFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit16AKLowShelfFilter")
@interface AKLowShelfFilter : AKNode
/// Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)
@property (nonatomic) double cutoffFrequency;
/// Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double gain;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This is an implementation of Zoelzer’s parametric equalizer filter.
SWIFT_CLASS("_TtC8AudioKit35AKLowShelfParametricEqualizerFilter")
@interface AKLowShelfParametricEqualizerFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Corner frequency.
@property (nonatomic) double cornerFrequency;
/// Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
@property (nonatomic) double gain;
/// Q of the filter. sqrt(0.5) is no resonance.
@property (nonatomic) double q;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// A version of AKInstrument specifically targeted to instruments that
/// should be triggerable via MIDI or sequenced with the sequencer.
SWIFT_CLASS("_TtC8AudioKit10AKMIDINode")
@interface AKMIDINode : AKNode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class AVAudioUnitSampler;

/// Sampler audio generation.
/// <ol>
///   <li>
///     init the audio unit like this: var sampler = AKSampler()
///   </li>
///   <li>
///     load a sound a file: sampler.loadWav(“path/to/your/sound/file/in/app/bundle”) (without wav extension)
///   </li>
///   <li>
///     connect to the engine: AudioKit.output = sampler
///   </li>
///   <li>
///     start the engine AudioKit.start()
///   </li>
/// </ol>
SWIFT_CLASS("_TtC8AudioKit9AKSampler")
@interface AKSampler : AKNode
/// Sampler AV Audio Unit
@property (nonatomic, strong) AVAudioUnitSampler * _Nonnull samplerUnit;
/// Transposition amount in semitones, from -24 to 24, Default: 0
@property (nonatomic) double tuning;
/// Initialize the sampler node
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Load a wav file
/// \param file Name of the file without an extension (assumed to be accessible from the bundle)
///
- (BOOL)loadWav:(NSString * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Load an EXS24 sample data file
/// \param file Name of the EXS24 file without the .exs extension
///
- (BOOL)loadEXS24:(NSString * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Load an AKAudioFile
/// \param file an AKAudioFile
///
- (BOOL)loadAudioFile:(AKAudioFile * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Load an array of AKAudioFiles
/// If a file name ends with a note name (ex: “violinC3.wav”)
/// The file will be set to this note
/// Handy to set multi-sampled instruments or a drum kit…
/// \param files An array of AKAudioFiles
///
- (BOOL)loadAudioFiles:(NSArray<AKAudioFile *> * _Nonnull)files error:(NSError * _Nullable * _Nullable)error;
/// Load a file path
/// \param filePath Name of the file with the extension
///
- (void)loadPath:(NSString * _Nonnull)filePath;
/// Output Amplitude. Range: -90.0 -> +12 db, Default: 0 db
@property (nonatomic) double amplitude;
/// Normalized Output Volume. Range: 0 -> 1, Default: 1
@property (nonatomic) double volume;
/// Pan. Range: -1 -> 1, Default: 0
@property (nonatomic) double pan;
/// Play a MIDI Note
/// \param noteNumber MIDI Note Number to play
///
/// \param velocity MIDI Velocity
///
/// \param channel MIDI Channnel
///
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Stop a MIDI Note
/// \param noteNumber MIDI Note Number to stop
///
/// \param channel MIDI Channnel
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel;
@end


/// MIDI receiving Sampler
/// Be sure to enableMIDI if you want to receive messages
SWIFT_CLASS("_TtC8AudioKit13AKMIDISampler")
@interface AKMIDISampler : AKSampler
/// Initialize the MIDI Sampler
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Start a note
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Stop a note
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel;
@end


/// Physical model of a 4 course mandolin
SWIFT_CLASS("_TtC8AudioKit10AKMandolin")
@interface AKMandolin : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Detuning of second string in the course (1=Unison (deault), 2=Octave)
@property (nonatomic) double detune;
/// Relative size of the mandoline (Default: 1, ranges ~ 0.5 - 2)
@property (nonatomic) double bodySize;
/// Strum all strings of the mandolin
/// \param position Position lengthwise along the string to pluck (0 - 1)
///
/// \param velocity MIDI Velocity as an amplitude of the pluck (0 - 127)
///
- (void)strum:(double)position velocity:(uint8_t)velocity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// Metal Bar Physical Model
SWIFT_CLASS("_TtC8AudioKit10AKMetalBar")
@interface AKMetalBar : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Boundary condition at left end of bar. 1 = clamped, 2 = pivoting, 3 = free
@property (nonatomic) double leftBoundaryCondition;
/// Boundary condition at right end of bar. 1 = clamped, 2 = pivoting, 3 = free
@property (nonatomic) double rightBoundaryCondition;
/// 30db decay time (in seconds).
@property (nonatomic) double decayDuration;
/// Speed of scanning the output location.
@property (nonatomic) double scanSpeed;
/// Position along bar that strike occurs.
@property (nonatomic) double position;
/// Normalized strike velocity
@property (nonatomic) double strikeVelocity;
/// Spatial width of strike.
@property (nonatomic) double strikeWidth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Operation-based generator
SWIFT_CLASS("_TtC8AudioKit20AKOperationGenerator")
@interface AKOperationGenerator : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Sporth language snippet
@property (nonatomic, copy) NSString * _Nonnull sporth;
/// Parameters for changing internal operations
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull parameters;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Useful metronome class that you can utilize for your own projects
SWIFT_CLASS("_TtC8AudioKit11AKMetronome")
@interface AKMetronome : AKOperationGenerator
@end


/// Audio from the standard input
SWIFT_CLASS("_TtC8AudioKit12AKMicrophone")
@interface AKMicrophone : AKNode
/// Output Volume (Default 1)
@property (nonatomic) double volume;
/// Determine if the microphone is currently on.
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the microphone
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AudioKit version of Apple’s Mixer Node
SWIFT_CLASS("_TtC8AudioKit7AKMixer")
@interface AKMixer : AKNode
/// Output Volume (Default 1)
@property (nonatomic) double volume;
/// Determine if the mixer is serving any output or if it is stopped.
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mixer node with no inputs, to be connected later
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize the mixer node with multiple inputs
/// \param inputs An array of AKNodes
///
- (nonnull instancetype)init:(NSArray<AKNode *> * _Nonnull)inputs;
@property (nonatomic, readonly, strong) AKInputConnection * _Nonnull nextInput;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// A modal resonance filter used for modal synthesis. Plucked and bell sounds
/// can be created using  passing an impulse through a combination of modal
/// filters.
SWIFT_CLASS("_TtC8AudioKit22AKModalResonanceFilter")
@interface AKModalResonanceFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Resonant frequency of the filter.
@property (nonatomic) double frequency;
/// Quality factor of the filter. Roughly equal to Q/frequency.
@property (nonatomic) double qualityFactor;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Moog Ladder is an new digital implementation of the Moog ladder filter based
/// on the work of Antti Huovilainen, described in the paper “Non-Linear Digital
/// Implementation of the Moog Ladder Filter” (Proceedings of DaFX04, Univ of
/// Napoli). This implementation is probably a more accurate digital
/// representation of the original analogue filter.
SWIFT_CLASS("_TtC8AudioKit12AKMoogLadder")
@interface AKMoogLadder : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Filter cutoff frequency.
@property (nonatomic) double cutoffFrequency;
/// Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing,
/// analogue synths generally allow resonances to be above 1.
@property (nonatomic) double resonance;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// This is an oscillator with linear interpolation that is capable of morphing
/// between an arbitrary number of wavetables.
SWIFT_CLASS("_TtC8AudioKit20AKMorphingOscillator")
@interface AKMorphingOscillator : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// In cycles per second, or Hz.
@property (nonatomic) double frequency;
/// Output Amplitude.
@property (nonatomic) double amplitude;
/// Index of the wavetable to use (fractional are okay).
@property (nonatomic) double index;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// This is an oscillator with linear interpolation that is capable of morphing
/// between an arbitrary number of wavetables.
SWIFT_CLASS("_TtC8AudioKit24AKMorphingOscillatorBank")
@interface AKMorphingOscillatorBank : AKPolyphonicNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Index of the wavetable to use (fractional are okay).
@property (nonatomic) double index;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) double pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) double vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) double vibratoRate;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end



@interface AKNode (SWIFT_EXTENSION(AudioKit))
- (void)disconnect SWIFT_DEPRECATED_MSG("", "detach");
@end




/// Simple audio recorder class
SWIFT_CLASS("_TtC8AudioKit14AKNodeRecorder")
@interface AKNodeRecorder : NSObject
/// True if we are recording.
@property (nonatomic, readonly) BOOL isRecording;
/// Stop recording
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8AudioKit19AKOfflineRenderNode")
@interface AKOfflineRenderNode : AKNode
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Operation-based effect
SWIFT_CLASS("_TtC8AudioKit17AKOperationEffect")
@interface AKOperationEffect : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Parameters for changing internal operations
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull parameters;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// Reads from the table sequentially and repeatedly at given frequency. Linear
/// interpolation is applied for table look up from internal phase values.
SWIFT_CLASS("_TtC8AudioKit12AKOscillator")
@interface AKOscillator : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// In cycles per second, or Hz.
@property (nonatomic) double frequency;
/// Output Amplitude.
@property (nonatomic) double amplitude;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// Reads from the table sequentially and repeatedly at given frequency. Linear
/// interpolation is applied for table look up from internal phase values.
SWIFT_CLASS("_TtC8AudioKit16AKOscillatorBank")
@interface AKOscillatorBank : AKPolyphonicNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) double pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) double vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) double vibratoRate;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Pulse-Width Modulating Oscillator
SWIFT_CLASS("_TtC8AudioKit15AKPWMOscillator")
@interface AKPWMOscillator : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// In cycles per second, or Hz.
@property (nonatomic) double frequency;
/// Output amplitude
@property (nonatomic) double amplitude;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Duty cycle width (range 0-1).
@property (nonatomic) double pulseWidth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// Pulse-Width Modulating Oscillator Bank
SWIFT_CLASS("_TtC8AudioKit19AKPWMOscillatorBank")
@interface AKPWMOscillatorBank : AKPolyphonicNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Duty cycle width (range 0-1).
@property (nonatomic) double pulseWidth;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) double pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) double vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) double vibratoRate;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Stereo Panner
SWIFT_CLASS("_TtC8AudioKit8AKPanner")
@interface AKPanner : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Panning. A value of -1 is hard left, and a value of 1 is hard right, and 0 is center.
@property (nonatomic) double pan;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s PeakLimiter Audio Unit
SWIFT_CLASS("_TtC8AudioKit13AKPeakLimiter")
@interface AKPeakLimiter : AKNode
/// Attack Time (Secs) ranges from 0.001 to 0.03 (Default: 0.012)
@property (nonatomic) double attackTime;
/// Decay Time (Secs) ranges from 0.001 to 0.06 (Default: 0.024)
@property (nonatomic) double decayTime;
/// Pre Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double preGain;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This is an implementation of Zoelzer’s parametric equalizer filter.
SWIFT_CLASS("_TtC8AudioKit34AKPeakingParametricEqualizerFilter")
@interface AKPeakingParametricEqualizerFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency.
@property (nonatomic) double centerFrequency;
/// Amount at which the center frequency value shall be increased or decreased. A value of 1 is a flat response.
@property (nonatomic) double gain;
/// Q of the filter. sqrt(0.5) is no resonance.
@property (nonatomic) double q;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A class to periodically perform a callback
SWIFT_CLASS("_TtC8AudioKit18AKPeriodicFunction")
@interface AKPeriodicFunction : AKOperationGenerator
@end


/// Phase Distortion Oscillator
SWIFT_CLASS("_TtC8AudioKit27AKPhaseDistortionOscillator")
@interface AKPhaseDistortionOscillator : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// In cycles per second, or Hz.
@property (nonatomic) double frequency;
/// Output amplitude
@property (nonatomic) double amplitude;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Duty cycle width (range -1 - 1).
@property (nonatomic) double phaseDistortion;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// Phase Distortion Oscillator Bank
SWIFT_CLASS("_TtC8AudioKit31AKPhaseDistortionOscillatorBank")
@interface AKPhaseDistortionOscillatorBank : AKPolyphonicNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Duty cycle width (range -1 - 1).
@property (nonatomic) double phaseDistortion;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) double pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) double vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) double vibratoRate;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// This is a phase locked vocoder. It has the ability to play back an audio
/// file loaded into an ftable like a sampler would. Unlike a typical sampler,
/// mincer allows time and pitch to be controlled separately.
SWIFT_CLASS("_TtC8AudioKit20AKPhaseLockedVocoder")
@interface AKPhaseLockedVocoder : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Position in time. When non-changing it will do a spectral freeze of a the current point in time.
@property (nonatomic) double position;
/// Amplitude.
@property (nonatomic) double amplitude;
/// Pitch ratio. A value of 1 is normal, 2 is double speed, 0.5 is halfspeed, etc.
@property (nonatomic) double pitchRatio;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A stereo phaser This is a stereo phaser, generated from Faust code taken
/// from the Guitarix project.
SWIFT_CLASS("_TtC8AudioKit8AKPhaser")
@interface AKPhaser : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Notch Minimum Frequency
@property (nonatomic) double notchMinimumFrequency;
/// Notch Maximum Frequency
@property (nonatomic) double notchMaximumFrequency;
/// Between 10 and 5000
@property (nonatomic) double notchWidth;
/// Between 1.1 and 4
@property (nonatomic) double notchFrequency;
/// 1 or 0
@property (nonatomic) double vibratoMode;
/// Between 0 and 1
@property (nonatomic) double depth;
/// Between 0 and 1
@property (nonatomic) double feedback;
/// 1 or 0
@property (nonatomic) double inverted;
/// Between 24 and 360
@property (nonatomic) double lfoBPM;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Faust-based pink noise generator
SWIFT_CLASS("_TtC8AudioKit11AKPinkNoise")
@interface AKPinkNoise : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Amplitude. (Value between 0-1).
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Faust-based pitch shifter
SWIFT_CLASS("_TtC8AudioKit14AKPitchShifter")
@interface AKPitchShifter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Pitch shift (in semitones)
@property (nonatomic) double shift;
/// Window size (in samples)
@property (nonatomic) double windowSize;
/// Crossfade (in samples)
@property (nonatomic) double crossfade;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Karplus-Strong plucked string instrument.
SWIFT_CLASS("_TtC8AudioKit15AKPluckedString")
@interface AKPluckedString : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the pluck with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


@class NSEvent;
@class NSCoder;

SWIFT_CLASS("_TtC8AudioKit17AKPropertyControl")
@interface AKPropertyControl : NSView
- (BOOL)acceptsFirstMouse:(NSEvent * _Nullable)theEvent SWIFT_WARN_UNUSED_RESULT;
/// Current value of the control
@property (nonatomic) double value;
/// Text shown on the control
@property (nonatomic, copy) NSString * _Nonnull property;
/// Format for the number shown on the control
@property (nonatomic, copy) NSString * _Nonnull format;
/// Font size
@property (nonatomic) CGFloat fontSize;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull discreteValues;
/// Initialization within Interface Builder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
- (void)mouseDown:(NSEvent * _Nonnull)theEvent;
- (void)mouseDragged:(NSEvent * _Nonnull)theEvent;
- (void)mouseUp:(NSEvent * _Nonnull)theEvent;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end


/// The output for reson appears to be very hot, so take caution when using this
/// module.
SWIFT_CLASS("_TtC8AudioKit16AKResonantFilter")
@interface AKResonantFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency of the filter, or frequency position of the peak response.
@property (nonatomic) double frequency;
/// Bandwidth of the filter.
@property (nonatomic) double bandwidth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s Reverb Audio Unit
SWIFT_CLASS("_TtC8AudioKit8AKReverb")
@interface AKReverb : AKNode
/// Dry/Wet Mix (Default 0.5)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Guitar head and cab simulator.
SWIFT_CLASS("_TtC8AudioKit22AKRhinoGuitarProcessor")
@interface AKRhinoGuitarProcessor : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Determines the amount of gain applied to the signal before processing.
@property (nonatomic) double preGain;
/// Gain applied after processing.
@property (nonatomic) double postGain;
/// Amount of Low frequencies.
@property (nonatomic) double lowGain;
/// Amount of Middle frequencies.
@property (nonatomic) double midGain;
/// Amount of High frequencies.
@property (nonatomic) double highGain;
/// Distortion Amount
@property (nonatomic) double distAmount;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// STK RhodesPiano
SWIFT_CLASS("_TtC8AudioKit13AKRhodesPiano")
@interface AKRhodesPiano : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mandolin with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AudioKit version of Apple’s Ring Modulator from the Distortion Audio Unit
SWIFT_CLASS("_TtC8AudioKit15AKRingModulator")
@interface AKRingModulator : AKNode
/// Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double frequency1;
/// Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double frequency2;
/// Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double balance;
/// Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
@property (nonatomic) double mix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Emulation of the Roland TB-303 filter
SWIFT_CLASS("_TtC8AudioKit19AKRolandTB303Filter")
@interface AKRolandTB303Filter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Cutoff frequency. (in Hertz)
@property (nonatomic) double cutoffFrequency;
/// Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing,
/// analogue synths generally allow resonances to be above 1.
@property (nonatomic) double resonance;
/// Distortion. Value is typically 2.0; deviation from this can cause stability issues.
@property (nonatomic) double distortion;
/// Asymmetry of resonance. Value is between 0-1
@property (nonatomic) double resonanceAsymmetry;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Audio player that loads a sample into memory
SWIFT_CLASS("_TtC8AudioKit14AKSamplePlayer")
@interface AKSamplePlayer : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// startPoint in samples - where to start playing the sample from
@property (nonatomic) uint32_t startPoint;
/// endPoint - this is where the sample will play to before stopping.
/// A value less than the start point will play the sample backwards.
@property (nonatomic) uint32_t endPoint;
/// playback rate - A value of 1 is normal, 2 is double speed, 0.5 is halfspeed, etc.
@property (nonatomic) double rate;
/// Volume - amplitude adjustment
@property (nonatomic) double volume;
/// Loop Enabled - if enabled, the sample will loop back to the startpoint when the endpoint is reached.
/// When disabled, the sample will play through once from startPoint to endPoint
@property (nonatomic) BOOL loopEnabled;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end





@interface AKSampler (SWIFT_EXTENSION(AudioKit))
/// Load a Bank from a SoundFont SF2 sample data file
/// \param file Name of the SoundFont SF2 file without the .sf2 extension
///
/// \param preset Number of the program to use
///
/// \param bank Number of the bank to use
///
- (BOOL)loadSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset bank:(NSInteger)bank error:(NSError * _Nullable * _Nullable)error;
/// Load a Melodic SoundFont SF2 sample data file
/// \param file Name of the SoundFont SF2 file without the .sf2 extension
///
/// \param preset Number of the program to use
///
- (BOOL)loadMelodicSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset error:(NSError * _Nullable * _Nullable)error;
/// Load a Percussive SoundFont SF2 sample data file
/// \param file Name of the SoundFont SF2 file without the .sf2 extension
///
/// \param preset Number of the program to use
///
- (BOOL)loadPercussiveSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset error:(NSError * _Nullable * _Nullable)error;
@end

@class AVAudioFormat;
enum BufferLength : NSInteger;

/// Global settings for AudioKit
SWIFT_CLASS("_TtC8AudioKit10AKSettings")
@interface AKSettings : NSObject
/// The sample rate in Hertz
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double sampleRate;)
+ (double)sampleRate SWIFT_WARN_UNUSED_RESULT;
+ (void)setSampleRate:(double)value;
/// Number of audio channels: 2 for stereo, 1 for mono
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) uint32_t numberOfChannels;)
+ (uint32_t)numberOfChannels SWIFT_WARN_UNUSED_RESULT;
+ (void)setNumberOfChannels:(uint32_t)value;
/// Whether we should be listening to audio input (microphone)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL audioInputEnabled;)
+ (BOOL)audioInputEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setAudioInputEnabled:(BOOL)value;
/// Whether to allow audio playback to override the mute setting
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL playbackWhileMuted;)
+ (BOOL)playbackWhileMuted SWIFT_WARN_UNUSED_RESULT;
+ (void)setPlaybackWhileMuted:(BOOL)value;
/// Global audio format AudioKit will default to
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AVAudioFormat * _Nonnull audioFormat;)
+ (AVAudioFormat * _Nonnull)audioFormat SWIFT_WARN_UNUSED_RESULT;
/// Whether to output to the speaker (rather than receiver) when audio input is enabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL defaultToSpeaker;)
+ (BOOL)defaultToSpeaker SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultToSpeaker:(BOOL)value;
/// Whether to use bluetooth when audio input is enabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL useBluetooth;)
+ (BOOL)useBluetooth SWIFT_WARN_UNUSED_RESULT;
+ (void)setUseBluetooth:(BOOL)value;
/// Whether AirPlay is enabled when audio input is enabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL allowAirPlay;)
+ (BOOL)allowAirPlay SWIFT_WARN_UNUSED_RESULT;
+ (void)setAllowAirPlay:(BOOL)value;
/// Global default rampTime value
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double rampTime;)
+ (double)rampTime SWIFT_WARN_UNUSED_RESULT;
+ (void)setRampTime:(double)value;
/// Allows AudioKit to send Notifications
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL notificationsEnabled;)
+ (BOOL)notificationsEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setNotificationsEnabled:(BOOL)value;
/// AudioKit buffer length is set using AKSettings.BufferLength
/// default is .VeryLong for a buffer set to 2 power 10 = 1024 samples (232 ms)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum BufferLength bufferLength;)
+ (enum BufferLength)bufferLength SWIFT_WARN_UNUSED_RESULT;
+ (void)setBufferLength:(enum BufferLength)value;
/// The hardware ioBufferDuration. Setting this will request the new value, getting
/// will query the hardware.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double ioBufferDuration;)
+ (double)ioBufferDuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setIoBufferDuration:(double)newValue;
/// AudioKit recording buffer length is set using AKSettings.BufferLength
/// default is .VeryLong for a buffer set to 2 power 10 = 1024 samples (232 ms)
/// in Apple’s doc : “The requested size of the incoming buffers. The implementation may choose another size.”
/// So setting this value may have no effect (depending on the hardware device ?)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum BufferLength recordingBufferLength;)
+ (enum BufferLength)recordingBufferLength SWIFT_WARN_UNUSED_RESULT;
+ (void)setRecordingBufferLength:(enum BufferLength)value;
/// If set to true, Recording will stop after some delay to compensate
/// latency between time recording is stopped and time it is written to file
/// If set to false (the default value) , stopping record will be immediate,
/// even if the last audio frames haven’t been recorded to file yet.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL fixTruncatedRecordings;)
+ (BOOL)fixTruncatedRecordings SWIFT_WARN_UNUSED_RESULT;
+ (void)setFixTruncatedRecordings:(BOOL)value;
/// Enable AudioKit AVAudioSession Category Management
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL disableAVAudioSessionCategoryManagement;)
+ (BOOL)disableAVAudioSessionCategoryManagement SWIFT_WARN_UNUSED_RESULT;
+ (void)setDisableAVAudioSessionCategoryManagement:(BOOL)value;
/// If set to false, AudioKit will not handle the AVAudioSession route change
/// notification (AVAudioSessionRouteChange) and will not restart the AVAudioEngine
/// instance when such notifications are posted. The developer can instead subscribe
/// to these notifications and restart AudioKit after rebuiling their audio chain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableRouteChangeHandling;)
+ (BOOL)enableRouteChangeHandling SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableRouteChangeHandling:(BOOL)value;
/// If set to false, AudioKit will not handle the AVAudioSession category change
/// notification (AVAudioEngineConfigurationChange) and will not restart the AVAudioEngine
/// instance when such notifications are posted. The developer can instead subscribe
/// to these notifications and restart AudioKit after rebuiling their audio chain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableCategoryChangeHandling;)
+ (BOOL)enableCategoryChangeHandling SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableCategoryChangeHandling:(BOOL)value;
/// Turn off AudioKit logging
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableLogging;)
+ (BOOL)enableLogging SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableLogging:(BOOL)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum of available buffer lengths
/// from Shortest: 2 power 5 samples (32 samples = 0.7 ms @ 44100 kz)
/// to Longest: 2 power 12 samples (4096 samples = 92.9 ms @ 44100 Hz)
typedef SWIFT_ENUM(NSInteger, BufferLength) {
/// Shortest
  BufferLengthShortest = 5,
/// Very Short
  BufferLengthVeryShort = 6,
/// Short
  BufferLengthShort = 7,
/// Medium
  BufferLengthMedium = 8,
/// Long
  BufferLengthLong = 9,
/// Very Long
  BufferLengthVeryLong = 10,
/// Huge
  BufferLengthHuge = 11,
/// Longest
  BufferLengthLongest = 12,
};


/// STK Shaker
SWIFT_CLASS("_TtC8AudioKit8AKShaker")
@interface AKShaker : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mandolin with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// Stereo Field Limiter
SWIFT_CLASS("_TtC8AudioKit20AKStereoFieldLimiter")
@interface AKStereoFieldLimiter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Limiting Factor
@property (nonatomic) double amount;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AKStringResonator passes the input through a network composed of comb,
/// low-pass and all-pass filters, similar to the one used in some versions of
/// the Karplus-Strong algorithm, creating a string resonator effect. The
/// fundamental frequency of the “string” is controlled by the
/// fundamentalFrequency.  This operation can be used to simulate sympathetic
/// resonances to an input signal.
SWIFT_CLASS("_TtC8AudioKit17AKStringResonator")
@interface AKStringResonator : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Fundamental frequency of string.
@property (nonatomic) double fundamentalFrequency;
/// Feedback amount (value between 0-1). A value close to 1 creates a slower decay and a more pronounced resonance.
/// Small values may leave the input signal unaffected. Depending on the filter frequency, typical values are > .9.
@property (nonatomic) double feedback;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Kick Drum Synthesizer Instrument
SWIFT_CLASS("_TtC8AudioKit11AKSynthKick")
@interface AKSynthKick : AKMIDIInstrument
/// Create the synth kick voice
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Unneeded stop function since the sounds all decay quickly
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Snare Drum Synthesizer Instrument
SWIFT_CLASS("_TtC8AudioKit12AKSynthSnare")
@interface AKSynthSnare : AKMIDIInstrument
/// Unneeded stop function since the sounds all decay quickly
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A table of values accessible as a waveform or lookup mechanism
SWIFT_CLASS("_TtC8AudioKit7AKTable")
@interface AKTable : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/// Supported default table types
typedef SWIFT_ENUM(NSInteger, AKTableType) {
/// Standard sine waveform
  AKTableTypeSine = 0,
/// Standard triangle waveform
  AKTableTypeTriangle = 1,
/// Standard square waveform
  AKTableTypeSquare = 2,
/// Standard sawtooth waveform
  AKTableTypeSawtooth = 3,
/// Reversed sawtooth waveform
  AKTableTypeReverseSawtooth = 4,
/// Sine wave from 0-1
  AKTableTypePositiveSine = 5,
/// Triangle waveform from 0-1
  AKTableTypePositiveTriangle = 6,
/// Square waveform from 0-1
  AKTableTypePositiveSquare = 7,
/// Sawtooth waveform from 0-1
  AKTableTypePositiveSawtooth = 8,
/// Reversed sawtooth waveform from 0-1
  AKTableTypePositiveReverseSawtooth = 9,
};


/// Distortion using a modified hyperbolic tangent function.
SWIFT_CLASS("_TtC8AudioKit16AKTanhDistortion")
@interface AKTanhDistortion : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Determines the amount of gain applied to the signal before waveshaping. A value of 1 gives slight distortion.
@property (nonatomic) double pregain;
/// Gain applied after waveshaping
@property (nonatomic) double postgain;
/// Shape of the positive part of the signal. A value of 0 gets a flat clip.
@property (nonatomic) double postiveShapeParameter;
/// Like the positive shape parameter, only for the negative part.
@property (nonatomic) double negativeShapeParameter;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Testing node
SWIFT_CLASS("_TtC8AudioKit8AKTester")
@interface AKTester : AKNode
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// 3-pole (18 db/oct slope) Low-Pass filter with resonance and tanh distortion.
SWIFT_CLASS("_TtC8AudioKit24AKThreePoleLowpassFilter")
@interface AKThreePoleLowpassFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the
/// filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount.
@property (nonatomic) double distortion;
/// Filter cutoff frequency in Hertz.
@property (nonatomic) double cutoffFrequency;
/// Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency.
/// Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect.
@property (nonatomic) double resonance;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s TimePitch Audio Unit
SWIFT_CLASS("_TtC8AudioKit11AKTimePitch")
@interface AKTimePitch : AKNode
/// Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)
@property (nonatomic) double rate;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Pitch (Cents) ranges from -2400 to 2400 (Default: 0.0)
@property (nonatomic) double pitch;
/// Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)
@property (nonatomic) double overlap;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A complement to the AKLowPassFilter.
SWIFT_CLASS("_TtC8AudioKit22AKToneComplementFilter")
@interface AKToneComplementFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Half-Power Point in Hertz. Half power is defined as peak power / square root of 2.
@property (nonatomic) double halfPowerPoint;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A first-order recursive low-pass filter with variable frequency response.
SWIFT_CLASS("_TtC8AudioKit12AKToneFilter")
@interface AKToneFilter : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// The response curve’s half-power point, in Hertz. Half power is defined as peak power / root 2.
@property (nonatomic) double halfPowerPoint;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Table-lookup tremolo with linear interpolation
SWIFT_CLASS("_TtC8AudioKit9AKTremolo")
@interface AKTremolo : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Frequency (Hz)
@property (nonatomic) double frequency;
/// Depth
@property (nonatomic) double depth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// STK TubularBells
SWIFT_CLASS("_TtC8AudioKit14AKTubularBells")
@interface AKTubularBells : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mandolin with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// Tuning table stores frequencies at which to play MIDI notes
SWIFT_CLASS("_TtC8AudioKit13AKTuningTable")
@interface AKTuningTable : NSObject
/// Initialization for standard default 12 tone equal temperament
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end
















/// AudioKit version of Apple’s VariSpeed Audio Unit
SWIFT_CLASS("_TtC8AudioKit11AKVariSpeed")
@interface AKVariSpeed : AKNode
/// Rate (rate) ranges form 0.25 to 4.0 (Default: 1.0)
@property (nonatomic) double rate;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A delay line with cubic interpolation.
SWIFT_CLASS("_TtC8AudioKit15AKVariableDelay")
@interface AKVariableDelay : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Delay time (in seconds) that can be changed at any point. This value must not exceed the maximum delay time.
@property (nonatomic) double time;
/// Feedback amount. Should be a value between 0-1.
@property (nonatomic) double feedback;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Based on the Pink Trombone algorithm by Neil Thapen, this implements a
/// physical model of the vocal tract glottal pulse wave. The tract model is
/// based on the classic Kelly-Lochbaum segmented cylindrical 1d waveguide
/// model, and the glottal pulse wave is a LF glottal pulse model.
SWIFT_CLASS("_TtC8AudioKit12AKVocalTract")
@interface AKVocalTract : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Glottal frequency.
@property (nonatomic) double frequency;
/// Tongue position (0-1)
@property (nonatomic) double tonguePosition;
/// Tongue diameter (0-1)
@property (nonatomic) double tongueDiameter;
/// Vocal tenseness. 0 = all breath. 1=fully saturated.
@property (nonatomic) double tenseness;
/// Sets the velum size. Larger values of this creates more nasally sounds.
@property (nonatomic) double nasality;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// White noise generator
SWIFT_CLASS("_TtC8AudioKit12AKWhiteNoise")
@interface AKWhiteNoise : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Amplitude. (Value between 0-1).
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// 8 FDN stereo zitareverb algorithm, imported from Faust.
SWIFT_CLASS("_TtC8AudioKit12AKZitaReverb")
@interface AKZitaReverb : AKNode
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Delay in ms before reverberation begins.
@property (nonatomic) double predelay;
/// Crossover frequency separating low and middle frequencies (Hz).
@property (nonatomic) double crossoverFrequency;
/// Time (in seconds) to decay 60db in low-frequency band.
@property (nonatomic) double lowReleaseTime;
/// Time (in seconds) to decay 60db in mid-frequency band.
@property (nonatomic) double midReleaseTime;
/// Frequency (Hz) at which the high-frequency T60 is half the middle-band’s T60.
@property (nonatomic) double dampingFrequency;
/// Center frequency of second-order Regalia Mitra peaking equalizer section 1.
@property (nonatomic) double equalizerFrequency1;
/// Peak level in dB of second-order Regalia-Mitra peaking equalizer section 1
@property (nonatomic) double equalizerLevel1;
/// Center frequency of second-order Regalia Mitra peaking equalizer section 2.
@property (nonatomic) double equalizerFrequency2;
/// Peak level in dB of second-order Regalia-Mitra peaking equalizer section 2
@property (nonatomic) double equalizerLevel2;
/// 0 = all dry, 1 = all wet
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end










@interface AVAudioFile (SWIFT_EXTENSION(AudioKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end














/// Top level AudioKit managing class
SWIFT_CLASS("_TtC8AudioKit8AudioKit")
@interface AudioKit : NSObject
/// Format of AudioKit Nodes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AVAudioFormat * _Nonnull format;)
+ (AVAudioFormat * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
+ (void)setFormat:(AVAudioFormat * _Nonnull)value;
/// Reference to the AV Audio Engine
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AVAudioEngine * _Nonnull engine;)
+ (AVAudioEngine * _Nonnull)engine SWIFT_WARN_UNUSED_RESULT;
/// An audio output operation that most applications will need to use last
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AKNode * _Nullable output;)
+ (AKNode * _Nullable)output SWIFT_WARN_UNUSED_RESULT;
+ (void)setOutput:(AKNode * _Nullable)newValue;
/// Enumerate the list of available input devices.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AKDevice *> * _Nullable inputDevices;)
+ (NSArray<AKDevice *> * _Nullable)inputDevices SWIFT_WARN_UNUSED_RESULT;
/// Enumerate the list of available output devices.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AKDevice *> * _Nullable outputDevices;)
+ (NSArray<AKDevice *> * _Nullable)outputDevices SWIFT_WARN_UNUSED_RESULT;
/// The name of the current input device, if available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AKDevice * _Nullable inputDevice;)
+ (AKDevice * _Nullable)inputDevice SWIFT_WARN_UNUSED_RESULT;
/// The name of the current output device, if available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AKDevice * _Nullable outputDevice;)
+ (AKDevice * _Nullable)outputDevice SWIFT_WARN_UNUSED_RESULT;
/// Change the preferred input device, giving it one of the names from the list of available inputs.
+ (BOOL)setInputDevice:(AKDevice * _Nonnull)input error:(NSError * _Nullable * _Nullable)error;
/// Change the preferred output device, giving it one of the names from the list of available output.
+ (BOOL)setOutputDevice:(AKDevice * _Nonnull)output error:(NSError * _Nullable * _Nullable)error;
/// Start up the audio engine
+ (void)start;
/// Stop the audio engine
+ (void)stop;
/// Testing AKNode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AKTester * _Nullable tester;)
+ (AKTester * _Nullable)tester SWIFT_WARN_UNUSED_RESULT;
+ (void)setTester:(AKTester * _Nullable)value;
/// Test the output of a given node
/// \param node AKNode to test
///
/// \param duration Number of seconds to test (accurate to the sample)
///
+ (void)testWithNode:(AKNode * _Nonnull)node duration:(double)duration afterStart:(SWIFT_NOESCAPE void (^ _Nonnull)(void))afterStart;
/// Audition the test to hear what it sounds like
/// \param node AKNode to test
///
/// \param duration Number of seconds to test (accurate to the sample)
///
+ (void)auditionTestWithNode:(AKNode * _Nonnull)node duration:(double)duration;
/// Disconnect all inputs
+ (void)disconnectAllInputs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AudioKit (SWIFT_EXTENSION(AudioKit))
+ (void)connect:(AVAudioNode * _Nonnull)sourceNode to:(NSArray<AVAudioConnectionPoint *> * _Nonnull)destNodes fromBus:(AVAudioNodeBus)sourceBus format:(AVAudioFormat * _Nullable)format;
+ (void)connect:(AVAudioNode * _Nonnull)node1 to:(AVAudioNode * _Nonnull)node2 fromBus:(AVAudioNodeBus)bus1 toBus:(AVAudioNodeBus)bus2 format:(AVAudioFormat * _Nullable)format;
+ (void)connect:(AVAudioNode * _Nonnull)node1 to:(AVAudioNode * _Nonnull)node2 format:(AVAudioFormat * _Nullable)format;
+ (void)detachWithNodes:(NSArray<AVAudioNode *> * _Nonnull)nodes;
@end





SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
